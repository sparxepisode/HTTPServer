// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_data_team.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Keep.DBData.Proto {

  /// <summary>Holder for reflection information generated from game_data_team.proto</summary>
  public static partial class GameDataTeamReflection {

    #region Descriptor
    /// <summary>File descriptor for game_data_team.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameDataTeamReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRnYW1lX2RhdGFfdGVhbS5wcm90bxIRS2VlcC5EQkRhdGEuUHJvdG8i4QIK",
            "D3BldF9idWZmZXJfaXRlbRIOCgZwZXRfaWQYASABKAUSEAoIcGV0X2tpbmQY",
            "AiABKAkSDwoHdW5pdF9pZBgDIAEoCRIWCg5wb3NpdGlvbl9pbmRleBgEIAEo",
            "BRIVCg1wcml2YXRlX3ZhbHVlGAUgASgCEhcKD3RyaWdnZXJfdW5oYXBweRgG",
            "IAEoARIaChJ0cmlnZ2VyX2dvbGRfcHdvZXIYByABKAESHQoVdHJpZ2dlcl9w",
            "aWNrX3VwX3Bvd2VyGAggASgBEhwKFHRyaWdnZXJfc2VhcmNoX3Bvd2VyGAkg",
            "ASgBEhoKEnRyaWdnZXJfaGFwcHlfcGxheRgKIAEoARIcChR0cmlnZ2VyX2Rl",
            "bWFuZF9wb3dlchgLIAEoARITCgtoYXBweV92YWx1ZRgMIAEoAhIYChBrZWVw",
            "X2hlYXJ0X2NvdW50GA0gASgFEhEKCWlzX2ZvbGxvdxgOIAEoCCK1AQoQZGJf",
            "ZGF0YV90ZWFtaW5mbxIPCgd1c2VyX2lkGAEgASgFEjcKC3BldF9idWZmZXJz",
            "GAIgAygLMiIuS2VlcC5EQkRhdGEuUHJvdG8ucGV0X2J1ZmZlcl9pdGVtEjwK",
            "EGxvc3RfcGV0X2J1ZmZlcnMYAyADKAsyIi5LZWVwLkRCRGF0YS5Qcm90by5w",
            "ZXRfYnVmZmVyX2l0ZW0SGQoRZXhpc3RfcGV0X2lkX2xpc3QYBCADKAViBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Keep.DBData.Proto.pet_buffer_item), global::Keep.DBData.Proto.pet_buffer_item.Parser, new[]{ "PetId", "PetKind", "UnitId", "PositionIndex", "PrivateValue", "TriggerUnhappy", "TriggerGoldPwoer", "TriggerPickUpPower", "TriggerSearchPower", "TriggerHappyPlay", "TriggerDemandPower", "HappyValue", "KeepHeartCount", "IsFollow" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keep.DBData.Proto.db_data_teaminfo), global::Keep.DBData.Proto.db_data_teaminfo.Parser, new[]{ "UserId", "PetBuffers", "LostPetBuffers", "ExistPetIdList" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class pet_buffer_item : pb::IMessage<pet_buffer_item> {
    private static readonly pb::MessageParser<pet_buffer_item> _parser = new pb::MessageParser<pet_buffer_item>(() => new pet_buffer_item());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pet_buffer_item> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keep.DBData.Proto.GameDataTeamReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pet_buffer_item() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pet_buffer_item(pet_buffer_item other) : this() {
      petId_ = other.petId_;
      petKind_ = other.petKind_;
      unitId_ = other.unitId_;
      positionIndex_ = other.positionIndex_;
      privateValue_ = other.privateValue_;
      triggerUnhappy_ = other.triggerUnhappy_;
      triggerGoldPwoer_ = other.triggerGoldPwoer_;
      triggerPickUpPower_ = other.triggerPickUpPower_;
      triggerSearchPower_ = other.triggerSearchPower_;
      triggerHappyPlay_ = other.triggerHappyPlay_;
      triggerDemandPower_ = other.triggerDemandPower_;
      happyValue_ = other.happyValue_;
      keepHeartCount_ = other.keepHeartCount_;
      isFollow_ = other.isFollow_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pet_buffer_item Clone() {
      return new pet_buffer_item(this);
    }

    /// <summary>Field number for the "pet_id" field.</summary>
    public const int PetIdFieldNumber = 1;
    private int petId_;
    /// <summary>
    /// 宠物 id 编号(实例化程序分配的狗牌id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PetId {
      get { return petId_; }
      set {
        petId_ = value;
      }
    }

    /// <summary>Field number for the "pet_kind" field.</summary>
    public const int PetKindFieldNumber = 2;
    private string petKind_ = "";
    /// <summary>
    /// 宠物类别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PetKind {
      get { return petKind_; }
      set {
        petKind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unit_id" field.</summary>
    public const int UnitIdFieldNumber = 3;
    private string unitId_ = "";
    /// <summary>
    /// 宠物 模型id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnitId {
      get { return unitId_; }
      set {
        unitId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "position_index" field.</summary>
    public const int PositionIndexFieldNumber = 4;
    private int positionIndex_;
    /// <summary>
    /// 宠物对应站位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PositionIndex {
      get { return positionIndex_; }
      set {
        positionIndex_ = value;
      }
    }

    /// <summary>Field number for the "private_value" field.</summary>
    public const int PrivateValueFieldNumber = 5;
    private float privateValue_;
    /// <summary>
    /// 当前默契度值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PrivateValue {
      get { return privateValue_; }
      set {
        privateValue_ = value;
      }
    }

    /// <summary>Field number for the "trigger_unhappy" field.</summary>
    public const int TriggerUnhappyFieldNumber = 6;
    private double triggerUnhappy_;
    /// <summary>
    /// 触发时间 宠物不开心CD
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TriggerUnhappy {
      get { return triggerUnhappy_; }
      set {
        triggerUnhappy_ = value;
      }
    }

    /// <summary>Field number for the "trigger_gold_pwoer" field.</summary>
    public const int TriggerGoldPwoerFieldNumber = 7;
    private double triggerGoldPwoer_;
    /// <summary>
    /// 触发时间 宠物拾取金币CD
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TriggerGoldPwoer {
      get { return triggerGoldPwoer_; }
      set {
        triggerGoldPwoer_ = value;
      }
    }

    /// <summary>Field number for the "trigger_pick_up_power" field.</summary>
    public const int TriggerPickUpPowerFieldNumber = 8;
    private double triggerPickUpPower_;
    /// <summary>
    /// 触发时间 宠物拾取道具CD
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TriggerPickUpPower {
      get { return triggerPickUpPower_; }
      set {
        triggerPickUpPower_ = value;
      }
    }

    /// <summary>Field number for the "trigger_search_power" field.</summary>
    public const int TriggerSearchPowerFieldNumber = 9;
    private double triggerSearchPower_;
    /// <summary>
    /// 触发时间 宠物嗅探道具CD
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TriggerSearchPower {
      get { return triggerSearchPower_; }
      set {
        triggerSearchPower_ = value;
      }
    }

    /// <summary>Field number for the "trigger_happy_play" field.</summary>
    public const int TriggerHappyPlayFieldNumber = 10;
    private double triggerHappyPlay_;
    /// <summary>
    /// 触发时间 宠物玩耍CD
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TriggerHappyPlay {
      get { return triggerHappyPlay_; }
      set {
        triggerHappyPlay_ = value;
      }
    }

    /// <summary>Field number for the "trigger_demand_power" field.</summary>
    public const int TriggerDemandPowerFieldNumber = 11;
    private double triggerDemandPower_;
    /// <summary>
    /// 触发时间 宠物赠送道具CD
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TriggerDemandPower {
      get { return triggerDemandPower_; }
      set {
        triggerDemandPower_ = value;
      }
    }

    /// <summary>Field number for the "happy_value" field.</summary>
    public const int HappyValueFieldNumber = 12;
    private float happyValue_;
    /// <summary>
    /// 宠物开心度值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HappyValue {
      get { return happyValue_; }
      set {
        happyValue_ = value;
      }
    }

    /// <summary>Field number for the "keep_heart_count" field.</summary>
    public const int KeepHeartCountFieldNumber = 13;
    private int keepHeartCount_;
    /// <summary>
    /// 陪伴之心个数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KeepHeartCount {
      get { return keepHeartCount_; }
      set {
        keepHeartCount_ = value;
      }
    }

    /// <summary>Field number for the "is_follow" field.</summary>
    public const int IsFollowFieldNumber = 14;
    private bool isFollow_;
    /// <summary>
    /// 是否携带出去
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFollow {
      get { return isFollow_; }
      set {
        isFollow_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as pet_buffer_item);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(pet_buffer_item other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PetId != other.PetId) return false;
      if (PetKind != other.PetKind) return false;
      if (UnitId != other.UnitId) return false;
      if (PositionIndex != other.PositionIndex) return false;
      if (PrivateValue != other.PrivateValue) return false;
      if (TriggerUnhappy != other.TriggerUnhappy) return false;
      if (TriggerGoldPwoer != other.TriggerGoldPwoer) return false;
      if (TriggerPickUpPower != other.TriggerPickUpPower) return false;
      if (TriggerSearchPower != other.TriggerSearchPower) return false;
      if (TriggerHappyPlay != other.TriggerHappyPlay) return false;
      if (TriggerDemandPower != other.TriggerDemandPower) return false;
      if (HappyValue != other.HappyValue) return false;
      if (KeepHeartCount != other.KeepHeartCount) return false;
      if (IsFollow != other.IsFollow) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PetId != 0) hash ^= PetId.GetHashCode();
      if (PetKind.Length != 0) hash ^= PetKind.GetHashCode();
      if (UnitId.Length != 0) hash ^= UnitId.GetHashCode();
      if (PositionIndex != 0) hash ^= PositionIndex.GetHashCode();
      if (PrivateValue != 0F) hash ^= PrivateValue.GetHashCode();
      if (TriggerUnhappy != 0D) hash ^= TriggerUnhappy.GetHashCode();
      if (TriggerGoldPwoer != 0D) hash ^= TriggerGoldPwoer.GetHashCode();
      if (TriggerPickUpPower != 0D) hash ^= TriggerPickUpPower.GetHashCode();
      if (TriggerSearchPower != 0D) hash ^= TriggerSearchPower.GetHashCode();
      if (TriggerHappyPlay != 0D) hash ^= TriggerHappyPlay.GetHashCode();
      if (TriggerDemandPower != 0D) hash ^= TriggerDemandPower.GetHashCode();
      if (HappyValue != 0F) hash ^= HappyValue.GetHashCode();
      if (KeepHeartCount != 0) hash ^= KeepHeartCount.GetHashCode();
      if (IsFollow != false) hash ^= IsFollow.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PetId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PetId);
      }
      if (PetKind.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PetKind);
      }
      if (UnitId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UnitId);
      }
      if (PositionIndex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PositionIndex);
      }
      if (PrivateValue != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(PrivateValue);
      }
      if (TriggerUnhappy != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(TriggerUnhappy);
      }
      if (TriggerGoldPwoer != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(TriggerGoldPwoer);
      }
      if (TriggerPickUpPower != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(TriggerPickUpPower);
      }
      if (TriggerSearchPower != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(TriggerSearchPower);
      }
      if (TriggerHappyPlay != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(TriggerHappyPlay);
      }
      if (TriggerDemandPower != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(TriggerDemandPower);
      }
      if (HappyValue != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(HappyValue);
      }
      if (KeepHeartCount != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(KeepHeartCount);
      }
      if (IsFollow != false) {
        output.WriteRawTag(112);
        output.WriteBool(IsFollow);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PetId);
      }
      if (PetKind.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PetKind);
      }
      if (UnitId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnitId);
      }
      if (PositionIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PositionIndex);
      }
      if (PrivateValue != 0F) {
        size += 1 + 4;
      }
      if (TriggerUnhappy != 0D) {
        size += 1 + 8;
      }
      if (TriggerGoldPwoer != 0D) {
        size += 1 + 8;
      }
      if (TriggerPickUpPower != 0D) {
        size += 1 + 8;
      }
      if (TriggerSearchPower != 0D) {
        size += 1 + 8;
      }
      if (TriggerHappyPlay != 0D) {
        size += 1 + 8;
      }
      if (TriggerDemandPower != 0D) {
        size += 1 + 8;
      }
      if (HappyValue != 0F) {
        size += 1 + 4;
      }
      if (KeepHeartCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KeepHeartCount);
      }
      if (IsFollow != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pet_buffer_item other) {
      if (other == null) {
        return;
      }
      if (other.PetId != 0) {
        PetId = other.PetId;
      }
      if (other.PetKind.Length != 0) {
        PetKind = other.PetKind;
      }
      if (other.UnitId.Length != 0) {
        UnitId = other.UnitId;
      }
      if (other.PositionIndex != 0) {
        PositionIndex = other.PositionIndex;
      }
      if (other.PrivateValue != 0F) {
        PrivateValue = other.PrivateValue;
      }
      if (other.TriggerUnhappy != 0D) {
        TriggerUnhappy = other.TriggerUnhappy;
      }
      if (other.TriggerGoldPwoer != 0D) {
        TriggerGoldPwoer = other.TriggerGoldPwoer;
      }
      if (other.TriggerPickUpPower != 0D) {
        TriggerPickUpPower = other.TriggerPickUpPower;
      }
      if (other.TriggerSearchPower != 0D) {
        TriggerSearchPower = other.TriggerSearchPower;
      }
      if (other.TriggerHappyPlay != 0D) {
        TriggerHappyPlay = other.TriggerHappyPlay;
      }
      if (other.TriggerDemandPower != 0D) {
        TriggerDemandPower = other.TriggerDemandPower;
      }
      if (other.HappyValue != 0F) {
        HappyValue = other.HappyValue;
      }
      if (other.KeepHeartCount != 0) {
        KeepHeartCount = other.KeepHeartCount;
      }
      if (other.IsFollow != false) {
        IsFollow = other.IsFollow;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PetId = input.ReadInt32();
            break;
          }
          case 18: {
            PetKind = input.ReadString();
            break;
          }
          case 26: {
            UnitId = input.ReadString();
            break;
          }
          case 32: {
            PositionIndex = input.ReadInt32();
            break;
          }
          case 45: {
            PrivateValue = input.ReadFloat();
            break;
          }
          case 49: {
            TriggerUnhappy = input.ReadDouble();
            break;
          }
          case 57: {
            TriggerGoldPwoer = input.ReadDouble();
            break;
          }
          case 65: {
            TriggerPickUpPower = input.ReadDouble();
            break;
          }
          case 73: {
            TriggerSearchPower = input.ReadDouble();
            break;
          }
          case 81: {
            TriggerHappyPlay = input.ReadDouble();
            break;
          }
          case 89: {
            TriggerDemandPower = input.ReadDouble();
            break;
          }
          case 101: {
            HappyValue = input.ReadFloat();
            break;
          }
          case 104: {
            KeepHeartCount = input.ReadInt32();
            break;
          }
          case 112: {
            IsFollow = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 单条宠物记录
  /// </summary>
  public sealed partial class db_data_teaminfo : pb::IMessage<db_data_teaminfo> {
    private static readonly pb::MessageParser<db_data_teaminfo> _parser = new pb::MessageParser<db_data_teaminfo>(() => new db_data_teaminfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<db_data_teaminfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keep.DBData.Proto.GameDataTeamReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_data_teaminfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_data_teaminfo(db_data_teaminfo other) : this() {
      userId_ = other.userId_;
      petBuffers_ = other.petBuffers_.Clone();
      lostPetBuffers_ = other.lostPetBuffers_.Clone();
      existPetIdList_ = other.existPetIdList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_data_teaminfo Clone() {
      return new db_data_teaminfo(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private int userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "pet_buffers" field.</summary>
    public const int PetBuffersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Keep.DBData.Proto.pet_buffer_item> _repeated_petBuffers_codec
        = pb::FieldCodec.ForMessage(18, global::Keep.DBData.Proto.pet_buffer_item.Parser);
    private readonly pbc::RepeatedField<global::Keep.DBData.Proto.pet_buffer_item> petBuffers_ = new pbc::RepeatedField<global::Keep.DBData.Proto.pet_buffer_item>();
    /// <summary>
    /// 当前宠物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Keep.DBData.Proto.pet_buffer_item> PetBuffers {
      get { return petBuffers_; }
    }

    /// <summary>Field number for the "lost_pet_buffers" field.</summary>
    public const int LostPetBuffersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Keep.DBData.Proto.pet_buffer_item> _repeated_lostPetBuffers_codec
        = pb::FieldCodec.ForMessage(26, global::Keep.DBData.Proto.pet_buffer_item.Parser);
    private readonly pbc::RepeatedField<global::Keep.DBData.Proto.pet_buffer_item> lostPetBuffers_ = new pbc::RepeatedField<global::Keep.DBData.Proto.pet_buffer_item>();
    /// <summary>
    /// 丢失宠物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Keep.DBData.Proto.pet_buffer_item> LostPetBuffers {
      get { return lostPetBuffers_; }
    }

    /// <summary>Field number for the "exist_pet_id_list" field.</summary>
    public const int ExistPetIdListFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_existPetIdList_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> existPetIdList_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 已拥有的宠物id,包括走丢的
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ExistPetIdList {
      get { return existPetIdList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as db_data_teaminfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(db_data_teaminfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if(!petBuffers_.Equals(other.petBuffers_)) return false;
      if(!lostPetBuffers_.Equals(other.lostPetBuffers_)) return false;
      if(!existPetIdList_.Equals(other.existPetIdList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      hash ^= petBuffers_.GetHashCode();
      hash ^= lostPetBuffers_.GetHashCode();
      hash ^= existPetIdList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserId);
      }
      petBuffers_.WriteTo(output, _repeated_petBuffers_codec);
      lostPetBuffers_.WriteTo(output, _repeated_lostPetBuffers_codec);
      existPetIdList_.WriteTo(output, _repeated_existPetIdList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      size += petBuffers_.CalculateSize(_repeated_petBuffers_codec);
      size += lostPetBuffers_.CalculateSize(_repeated_lostPetBuffers_codec);
      size += existPetIdList_.CalculateSize(_repeated_existPetIdList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(db_data_teaminfo other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      petBuffers_.Add(other.petBuffers_);
      lostPetBuffers_.Add(other.lostPetBuffers_);
      existPetIdList_.Add(other.existPetIdList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt32();
            break;
          }
          case 18: {
            petBuffers_.AddEntriesFrom(input, _repeated_petBuffers_codec);
            break;
          }
          case 26: {
            lostPetBuffers_.AddEntriesFrom(input, _repeated_lostPetBuffers_codec);
            break;
          }
          case 34:
          case 32: {
            existPetIdList_.AddEntriesFrom(input, _repeated_existPetIdList_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
