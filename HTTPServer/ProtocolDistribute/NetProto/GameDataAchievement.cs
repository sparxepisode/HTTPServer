// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_data_achievement.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Keep.DBData.Proto {

  /// <summary>Holder for reflection information generated from game_data_achievement.proto</summary>
  public static partial class GameDataAchievementReflection {

    #region Descriptor
    /// <summary>File descriptor for game_data_achievement.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameDataAchievementReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtnYW1lX2RhdGFfYWNoaWV2ZW1lbnQucHJvdG8SEUtlZXAuREJEYXRhLlBy",
            "b3RvIjEKFWFjaGlldmVtZW50aW5mb19ldmVudBIKCgJpZBgBIAEoCRIMCgRt",
            "YXJrGAIgASgIIpIBChlhY2hpZXZlbWVudGluZm9fdHJhdmVsbGVyEgoKAmlk",
            "GAEgASgJEgwKBG1hcmsYAiABKAgSEgoKam9pbl9jb3VudBgDIAEoBRIVCg1p",
            "c19maXJzdF9qb2luGAQgASgIEhMKC2lzX2NvbXBsZXRlGAUgASgIEhsKE25l",
            "ZWRfY29tcGxldGVfY291bnQYBiABKAUieQoVYWNoaWV2ZW1lbnRpbmZvX3N0",
            "b3J5EgoKAmlkGAEgASgJEgwKBG1hcmsYAiABKAgSEwoLaXNfY29tcGxldGUY",
            "AyABKAgSGQoRaXNfZmlyc3RfY29tcGxldGUYBCABKAgSFgoOY29tcGxldGVf",
            "bm9kZXMYBSADKAkiiAEKE2FjaGlldmVtZW50aW5mb19wZXQSCgoCaWQYASAB",
            "KAkSDAoEbWFyaxgCIAEoCBIPCgd1bmxvY2tzGAMgAygFEhoKEmlzX3VubG9j",
            "a19jb21wbGV0ZRgEIAEoCBIMCgRuYW1lGAUgASgJEgsKA2RlcxgGIAEoCRIP",
            "CgdpY29uX2lkGAcgASgJIrICChdkYl9kYXRhX2FjaGlldmVtZW50aW5mbxIP",
            "Cgd1c2VyX2lkGAEgASgFEj8KDWV2ZW50X2J1ZmZlcnMYAiADKAsyKC5LZWVw",
            "LkRCRGF0YS5Qcm90by5hY2hpZXZlbWVudGluZm9fZXZlbnQSRwoRdHJhdmVs",
            "bGVyX2J1ZmZlcnMYAyADKAsyLC5LZWVwLkRCRGF0YS5Qcm90by5hY2hpZXZl",
            "bWVudGluZm9fdHJhdmVsbGVyEj8KDXN0b3J5X2J1ZmZlcnMYBCADKAsyKC5L",
            "ZWVwLkRCRGF0YS5Qcm90by5hY2hpZXZlbWVudGluZm9fc3RvcnkSOwoLcGV0",
            "X2J1ZmZlcnMYBSADKAsyJi5LZWVwLkRCRGF0YS5Qcm90by5hY2hpZXZlbWVu",
            "dGluZm9fcGV0YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Keep.DBData.Proto.achievementinfo_event), global::Keep.DBData.Proto.achievementinfo_event.Parser, new[]{ "Id", "Mark" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keep.DBData.Proto.achievementinfo_traveller), global::Keep.DBData.Proto.achievementinfo_traveller.Parser, new[]{ "Id", "Mark", "JoinCount", "IsFirstJoin", "IsComplete", "NeedCompleteCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keep.DBData.Proto.achievementinfo_story), global::Keep.DBData.Proto.achievementinfo_story.Parser, new[]{ "Id", "Mark", "IsComplete", "IsFirstComplete", "CompleteNodes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keep.DBData.Proto.achievementinfo_pet), global::Keep.DBData.Proto.achievementinfo_pet.Parser, new[]{ "Id", "Mark", "Unlocks", "IsUnlockComplete", "Name", "Des", "IconId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keep.DBData.Proto.db_data_achievementinfo), global::Keep.DBData.Proto.db_data_achievementinfo.Parser, new[]{ "UserId", "EventBuffers", "TravellerBuffers", "StoryBuffers", "PetBuffers" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 事件解锁成就
  /// </summary>
  public sealed partial class achievementinfo_event : pb::IMessage<achievementinfo_event> {
    private static readonly pb::MessageParser<achievementinfo_event> _parser = new pb::MessageParser<achievementinfo_event>(() => new achievementinfo_event());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<achievementinfo_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keep.DBData.Proto.GameDataAchievementReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public achievementinfo_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public achievementinfo_event(achievementinfo_event other) : this() {
      id_ = other.id_;
      mark_ = other.mark_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public achievementinfo_event Clone() {
      return new achievementinfo_event(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mark" field.</summary>
    public const int MarkFieldNumber = 2;
    private bool mark_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Mark {
      get { return mark_; }
      set {
        mark_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as achievementinfo_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(achievementinfo_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Mark != other.Mark) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Mark != false) hash ^= Mark.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Mark != false) {
        output.WriteRawTag(16);
        output.WriteBool(Mark);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Mark != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(achievementinfo_event other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Mark != false) {
        Mark = other.Mark;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Mark = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 旅人解锁成就
  /// </summary>
  public sealed partial class achievementinfo_traveller : pb::IMessage<achievementinfo_traveller> {
    private static readonly pb::MessageParser<achievementinfo_traveller> _parser = new pb::MessageParser<achievementinfo_traveller>(() => new achievementinfo_traveller());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<achievementinfo_traveller> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keep.DBData.Proto.GameDataAchievementReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public achievementinfo_traveller() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public achievementinfo_traveller(achievementinfo_traveller other) : this() {
      id_ = other.id_;
      mark_ = other.mark_;
      joinCount_ = other.joinCount_;
      isFirstJoin_ = other.isFirstJoin_;
      isComplete_ = other.isComplete_;
      needCompleteCount_ = other.needCompleteCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public achievementinfo_traveller Clone() {
      return new achievementinfo_traveller(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mark" field.</summary>
    public const int MarkFieldNumber = 2;
    private bool mark_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Mark {
      get { return mark_; }
      set {
        mark_ = value;
      }
    }

    /// <summary>Field number for the "join_count" field.</summary>
    public const int JoinCountFieldNumber = 3;
    private int joinCount_;
    /// <summary>
    /// 交互次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JoinCount {
      get { return joinCount_; }
      set {
        joinCount_ = value;
      }
    }

    /// <summary>Field number for the "is_first_join" field.</summary>
    public const int IsFirstJoinFieldNumber = 4;
    private bool isFirstJoin_;
    /// <summary>
    /// 是否第一次加入
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFirstJoin {
      get { return isFirstJoin_; }
      set {
        isFirstJoin_ = value;
      }
    }

    /// <summary>Field number for the "is_complete" field.</summary>
    public const int IsCompleteFieldNumber = 5;
    private bool isComplete_;
    /// <summary>
    /// 是否解锁	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsComplete {
      get { return isComplete_; }
      set {
        isComplete_ = value;
      }
    }

    /// <summary>Field number for the "need_complete_count" field.</summary>
    public const int NeedCompleteCountFieldNumber = 6;
    private int needCompleteCount_;
    /// <summary>
    /// 需要解锁次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NeedCompleteCount {
      get { return needCompleteCount_; }
      set {
        needCompleteCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as achievementinfo_traveller);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(achievementinfo_traveller other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Mark != other.Mark) return false;
      if (JoinCount != other.JoinCount) return false;
      if (IsFirstJoin != other.IsFirstJoin) return false;
      if (IsComplete != other.IsComplete) return false;
      if (NeedCompleteCount != other.NeedCompleteCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Mark != false) hash ^= Mark.GetHashCode();
      if (JoinCount != 0) hash ^= JoinCount.GetHashCode();
      if (IsFirstJoin != false) hash ^= IsFirstJoin.GetHashCode();
      if (IsComplete != false) hash ^= IsComplete.GetHashCode();
      if (NeedCompleteCount != 0) hash ^= NeedCompleteCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Mark != false) {
        output.WriteRawTag(16);
        output.WriteBool(Mark);
      }
      if (JoinCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(JoinCount);
      }
      if (IsFirstJoin != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsFirstJoin);
      }
      if (IsComplete != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsComplete);
      }
      if (NeedCompleteCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(NeedCompleteCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Mark != false) {
        size += 1 + 1;
      }
      if (JoinCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JoinCount);
      }
      if (IsFirstJoin != false) {
        size += 1 + 1;
      }
      if (IsComplete != false) {
        size += 1 + 1;
      }
      if (NeedCompleteCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NeedCompleteCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(achievementinfo_traveller other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Mark != false) {
        Mark = other.Mark;
      }
      if (other.JoinCount != 0) {
        JoinCount = other.JoinCount;
      }
      if (other.IsFirstJoin != false) {
        IsFirstJoin = other.IsFirstJoin;
      }
      if (other.IsComplete != false) {
        IsComplete = other.IsComplete;
      }
      if (other.NeedCompleteCount != 0) {
        NeedCompleteCount = other.NeedCompleteCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Mark = input.ReadBool();
            break;
          }
          case 24: {
            JoinCount = input.ReadInt32();
            break;
          }
          case 32: {
            IsFirstJoin = input.ReadBool();
            break;
          }
          case 40: {
            IsComplete = input.ReadBool();
            break;
          }
          case 48: {
            NeedCompleteCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 故事解锁成就
  /// </summary>
  public sealed partial class achievementinfo_story : pb::IMessage<achievementinfo_story> {
    private static readonly pb::MessageParser<achievementinfo_story> _parser = new pb::MessageParser<achievementinfo_story>(() => new achievementinfo_story());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<achievementinfo_story> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keep.DBData.Proto.GameDataAchievementReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public achievementinfo_story() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public achievementinfo_story(achievementinfo_story other) : this() {
      id_ = other.id_;
      mark_ = other.mark_;
      isComplete_ = other.isComplete_;
      isFirstComplete_ = other.isFirstComplete_;
      completeNodes_ = other.completeNodes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public achievementinfo_story Clone() {
      return new achievementinfo_story(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mark" field.</summary>
    public const int MarkFieldNumber = 2;
    private bool mark_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Mark {
      get { return mark_; }
      set {
        mark_ = value;
      }
    }

    /// <summary>Field number for the "is_complete" field.</summary>
    public const int IsCompleteFieldNumber = 3;
    private bool isComplete_;
    /// <summary>
    ///是否解锁
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsComplete {
      get { return isComplete_; }
      set {
        isComplete_ = value;
      }
    }

    /// <summary>Field number for the "is_first_complete" field.</summary>
    public const int IsFirstCompleteFieldNumber = 4;
    private bool isFirstComplete_;
    /// <summary>
    /// 第一次点亮
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFirstComplete {
      get { return isFirstComplete_; }
      set {
        isFirstComplete_ = value;
      }
    }

    /// <summary>Field number for the "complete_nodes" field.</summary>
    public const int CompleteNodesFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_completeNodes_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> completeNodes_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 解锁的故事节点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CompleteNodes {
      get { return completeNodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as achievementinfo_story);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(achievementinfo_story other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Mark != other.Mark) return false;
      if (IsComplete != other.IsComplete) return false;
      if (IsFirstComplete != other.IsFirstComplete) return false;
      if(!completeNodes_.Equals(other.completeNodes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Mark != false) hash ^= Mark.GetHashCode();
      if (IsComplete != false) hash ^= IsComplete.GetHashCode();
      if (IsFirstComplete != false) hash ^= IsFirstComplete.GetHashCode();
      hash ^= completeNodes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Mark != false) {
        output.WriteRawTag(16);
        output.WriteBool(Mark);
      }
      if (IsComplete != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsComplete);
      }
      if (IsFirstComplete != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsFirstComplete);
      }
      completeNodes_.WriteTo(output, _repeated_completeNodes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Mark != false) {
        size += 1 + 1;
      }
      if (IsComplete != false) {
        size += 1 + 1;
      }
      if (IsFirstComplete != false) {
        size += 1 + 1;
      }
      size += completeNodes_.CalculateSize(_repeated_completeNodes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(achievementinfo_story other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Mark != false) {
        Mark = other.Mark;
      }
      if (other.IsComplete != false) {
        IsComplete = other.IsComplete;
      }
      if (other.IsFirstComplete != false) {
        IsFirstComplete = other.IsFirstComplete;
      }
      completeNodes_.Add(other.completeNodes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Mark = input.ReadBool();
            break;
          }
          case 24: {
            IsComplete = input.ReadBool();
            break;
          }
          case 32: {
            IsFirstComplete = input.ReadBool();
            break;
          }
          case 42: {
            completeNodes_.AddEntriesFrom(input, _repeated_completeNodes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 宠物解锁成就
  /// </summary>
  public sealed partial class achievementinfo_pet : pb::IMessage<achievementinfo_pet> {
    private static readonly pb::MessageParser<achievementinfo_pet> _parser = new pb::MessageParser<achievementinfo_pet>(() => new achievementinfo_pet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<achievementinfo_pet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keep.DBData.Proto.GameDataAchievementReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public achievementinfo_pet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public achievementinfo_pet(achievementinfo_pet other) : this() {
      id_ = other.id_;
      mark_ = other.mark_;
      unlocks_ = other.unlocks_.Clone();
      isUnlockComplete_ = other.isUnlockComplete_;
      name_ = other.name_;
      des_ = other.des_;
      iconId_ = other.iconId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public achievementinfo_pet Clone() {
      return new achievementinfo_pet(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mark" field.</summary>
    public const int MarkFieldNumber = 2;
    private bool mark_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Mark {
      get { return mark_; }
      set {
        mark_ = value;
      }
    }

    /// <summary>Field number for the "unlocks" field.</summary>
    public const int UnlocksFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_unlocks_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> unlocks_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///解锁类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Unlocks {
      get { return unlocks_; }
    }

    /// <summary>Field number for the "is_unlock_complete" field.</summary>
    public const int IsUnlockCompleteFieldNumber = 4;
    private bool isUnlockComplete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUnlockComplete {
      get { return isUnlockComplete_; }
      set {
        isUnlockComplete_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "des" field.</summary>
    public const int DesFieldNumber = 6;
    private string des_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Des {
      get { return des_; }
      set {
        des_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "icon_id" field.</summary>
    public const int IconIdFieldNumber = 7;
    private string iconId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IconId {
      get { return iconId_; }
      set {
        iconId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as achievementinfo_pet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(achievementinfo_pet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Mark != other.Mark) return false;
      if(!unlocks_.Equals(other.unlocks_)) return false;
      if (IsUnlockComplete != other.IsUnlockComplete) return false;
      if (Name != other.Name) return false;
      if (Des != other.Des) return false;
      if (IconId != other.IconId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Mark != false) hash ^= Mark.GetHashCode();
      hash ^= unlocks_.GetHashCode();
      if (IsUnlockComplete != false) hash ^= IsUnlockComplete.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Des.Length != 0) hash ^= Des.GetHashCode();
      if (IconId.Length != 0) hash ^= IconId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Mark != false) {
        output.WriteRawTag(16);
        output.WriteBool(Mark);
      }
      unlocks_.WriteTo(output, _repeated_unlocks_codec);
      if (IsUnlockComplete != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsUnlockComplete);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (Des.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Des);
      }
      if (IconId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(IconId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Mark != false) {
        size += 1 + 1;
      }
      size += unlocks_.CalculateSize(_repeated_unlocks_codec);
      if (IsUnlockComplete != false) {
        size += 1 + 1;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Des.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Des);
      }
      if (IconId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IconId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(achievementinfo_pet other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Mark != false) {
        Mark = other.Mark;
      }
      unlocks_.Add(other.unlocks_);
      if (other.IsUnlockComplete != false) {
        IsUnlockComplete = other.IsUnlockComplete;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Des.Length != 0) {
        Des = other.Des;
      }
      if (other.IconId.Length != 0) {
        IconId = other.IconId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Mark = input.ReadBool();
            break;
          }
          case 26:
          case 24: {
            unlocks_.AddEntriesFrom(input, _repeated_unlocks_codec);
            break;
          }
          case 32: {
            IsUnlockComplete = input.ReadBool();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 50: {
            Des = input.ReadString();
            break;
          }
          case 58: {
            IconId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 单条成就记录
  /// </summary>
  public sealed partial class db_data_achievementinfo : pb::IMessage<db_data_achievementinfo> {
    private static readonly pb::MessageParser<db_data_achievementinfo> _parser = new pb::MessageParser<db_data_achievementinfo>(() => new db_data_achievementinfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<db_data_achievementinfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keep.DBData.Proto.GameDataAchievementReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_data_achievementinfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_data_achievementinfo(db_data_achievementinfo other) : this() {
      userId_ = other.userId_;
      eventBuffers_ = other.eventBuffers_.Clone();
      travellerBuffers_ = other.travellerBuffers_.Clone();
      storyBuffers_ = other.storyBuffers_.Clone();
      petBuffers_ = other.petBuffers_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_data_achievementinfo Clone() {
      return new db_data_achievementinfo(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private int userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "event_buffers" field.</summary>
    public const int EventBuffersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Keep.DBData.Proto.achievementinfo_event> _repeated_eventBuffers_codec
        = pb::FieldCodec.ForMessage(18, global::Keep.DBData.Proto.achievementinfo_event.Parser);
    private readonly pbc::RepeatedField<global::Keep.DBData.Proto.achievementinfo_event> eventBuffers_ = new pbc::RepeatedField<global::Keep.DBData.Proto.achievementinfo_event>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Keep.DBData.Proto.achievementinfo_event> EventBuffers {
      get { return eventBuffers_; }
    }

    /// <summary>Field number for the "traveller_buffers" field.</summary>
    public const int TravellerBuffersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Keep.DBData.Proto.achievementinfo_traveller> _repeated_travellerBuffers_codec
        = pb::FieldCodec.ForMessage(26, global::Keep.DBData.Proto.achievementinfo_traveller.Parser);
    private readonly pbc::RepeatedField<global::Keep.DBData.Proto.achievementinfo_traveller> travellerBuffers_ = new pbc::RepeatedField<global::Keep.DBData.Proto.achievementinfo_traveller>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Keep.DBData.Proto.achievementinfo_traveller> TravellerBuffers {
      get { return travellerBuffers_; }
    }

    /// <summary>Field number for the "story_buffers" field.</summary>
    public const int StoryBuffersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Keep.DBData.Proto.achievementinfo_story> _repeated_storyBuffers_codec
        = pb::FieldCodec.ForMessage(34, global::Keep.DBData.Proto.achievementinfo_story.Parser);
    private readonly pbc::RepeatedField<global::Keep.DBData.Proto.achievementinfo_story> storyBuffers_ = new pbc::RepeatedField<global::Keep.DBData.Proto.achievementinfo_story>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Keep.DBData.Proto.achievementinfo_story> StoryBuffers {
      get { return storyBuffers_; }
    }

    /// <summary>Field number for the "pet_buffers" field.</summary>
    public const int PetBuffersFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Keep.DBData.Proto.achievementinfo_pet> _repeated_petBuffers_codec
        = pb::FieldCodec.ForMessage(42, global::Keep.DBData.Proto.achievementinfo_pet.Parser);
    private readonly pbc::RepeatedField<global::Keep.DBData.Proto.achievementinfo_pet> petBuffers_ = new pbc::RepeatedField<global::Keep.DBData.Proto.achievementinfo_pet>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Keep.DBData.Proto.achievementinfo_pet> PetBuffers {
      get { return petBuffers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as db_data_achievementinfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(db_data_achievementinfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if(!eventBuffers_.Equals(other.eventBuffers_)) return false;
      if(!travellerBuffers_.Equals(other.travellerBuffers_)) return false;
      if(!storyBuffers_.Equals(other.storyBuffers_)) return false;
      if(!petBuffers_.Equals(other.petBuffers_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      hash ^= eventBuffers_.GetHashCode();
      hash ^= travellerBuffers_.GetHashCode();
      hash ^= storyBuffers_.GetHashCode();
      hash ^= petBuffers_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserId);
      }
      eventBuffers_.WriteTo(output, _repeated_eventBuffers_codec);
      travellerBuffers_.WriteTo(output, _repeated_travellerBuffers_codec);
      storyBuffers_.WriteTo(output, _repeated_storyBuffers_codec);
      petBuffers_.WriteTo(output, _repeated_petBuffers_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      size += eventBuffers_.CalculateSize(_repeated_eventBuffers_codec);
      size += travellerBuffers_.CalculateSize(_repeated_travellerBuffers_codec);
      size += storyBuffers_.CalculateSize(_repeated_storyBuffers_codec);
      size += petBuffers_.CalculateSize(_repeated_petBuffers_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(db_data_achievementinfo other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      eventBuffers_.Add(other.eventBuffers_);
      travellerBuffers_.Add(other.travellerBuffers_);
      storyBuffers_.Add(other.storyBuffers_);
      petBuffers_.Add(other.petBuffers_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt32();
            break;
          }
          case 18: {
            eventBuffers_.AddEntriesFrom(input, _repeated_eventBuffers_codec);
            break;
          }
          case 26: {
            travellerBuffers_.AddEntriesFrom(input, _repeated_travellerBuffers_codec);
            break;
          }
          case 34: {
            storyBuffers_.AddEntriesFrom(input, _repeated_storyBuffers_codec);
            break;
          }
          case 42: {
            petBuffers_.AddEntriesFrom(input, _repeated_petBuffers_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
