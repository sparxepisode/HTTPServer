// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_data_avatarinfo.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Keep.DBData.Proto {

  /// <summary>Holder for reflection information generated from game_data_avatarinfo.proto</summary>
  public static partial class GameDataAvatarinfoReflection {

    #region Descriptor
    /// <summary>File descriptor for game_data_avatarinfo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameDataAvatarinfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpnYW1lX2RhdGFfYXZhdGFyaW5mby5wcm90bxIRS2VlcC5EQkRhdGEuUHJv",
            "dG8ihAEKD2F2YXRhcmluZm9fYmFzZRIKCgJpZBgBIAEoBRIQCghuaWNrTmFt",
            "ZRgCIAEoCRI1CgxyZWdnc3RlclR5cGUYAyABKA4yHy5LZWVwLkRCRGF0YS5Q",
            "cm90by5yZWdpc3RlclR5cGUSDAoEZ29sZBgEIAEoBRIOCgZpc1R1dG8YBSAB",
            "KAgiOAoTYXZhdGFyaW5mb19hcmVhX21hcBIQCghhcmVhX251bRgBIAEoBRIP",
            "Cgdpc19sb2NrGAIgASgIIjYKFWF2YXRhcmluZm9fbWFwX2J1ZmZlchIRCglp",
            "c191bmxvY2sYASABKAgSCgoCaWQYAiABKAkicwoSYXZhdGFyaW5mb19zdGFt",
            "aW5hEhkKEW1heF9leHRyYV9zdGFtaW5hGAEgASgCEhQKDGNhbXBfc3RhbWlu",
            "YRgCIAEoAhIXCg9leHBsb3JlX3N0YW1pbmEYAyABKAISEwoLY2FycnlfY291",
            "bnQYBCABKAUiLQoQYXZhdGFyaW5mb19jbG90aBIMCgRwYXJ0GAEgASgJEgsK",
            "A251bRgCIAEoCSKkAQobYXZhdGFyaW5mb19tYXBfZXhwbG9yZV9pbmZvEg4K",
            "Bm1hcF9pZBgBIAEoCRIZChFjdXJyZW50X3N0YXRlX251bRgCIAEoBRIZChFt",
            "YXBsb2NrX3N0YXRlX251bRgDIAEoBRIUCgxjdXJyZW50X3RpbWUYBCABKAUS",
            "DwoHaXNfbG9jaxgFIAEoCBIYChBpc19maXJzdF9leHBsb3JlGAYgASgIItIC",
            "ChJkYl9kYXRhX2F2YXRlcmluZm8SDwoHdXNlcl9pZBgBIAEoBRIwCgRiYXNl",
            "GAIgASgLMiIuS2VlcC5EQkRhdGEuUHJvdG8uYXZhdGFyaW5mb19iYXNlEjkK",
            "CWFyZWFfbWFwcxgDIAMoCzImLktlZXAuREJEYXRhLlByb3RvLmF2YXRhcmlu",
            "Zm9fYXJlYV9tYXASPQoLbWFwX2J1ZmZlcnMYBCADKAsyKC5LZWVwLkRCRGF0",
            "YS5Qcm90by5hdmF0YXJpbmZvX21hcF9idWZmZXISOgoNcGxheWVyX2Nsb3Ro",
            "cxgFIAMoCzIjLktlZXAuREJEYXRhLlByb3RvLmF2YXRhcmluZm9fY2xvdGgS",
            "QwoLbWFwX2V4cGxvcmUYBiADKAsyLi5LZWVwLkRCRGF0YS5Qcm90by5hdmF0",
            "YXJpbmZvX21hcF9leHBsb3JlX2luZm8qggEKDHJlZ2lzdGVyVHlwZRIRCg1y",
            "ZWdpc3Rlcl9ub25lEAASEQoNcmVnaXN0ZXJfc2VsZhABEhoKFnJlZ2lzdGVy",
            "X2V4dGVybl93ZWNoYXQQAhIWChJyZWdpc3Rlcl9leHRlcm5fcXEQAxIYChRy",
            "ZWdpc3Rlcl9leHRlcm5fc2luYRAEYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Keep.DBData.Proto.registerType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Keep.DBData.Proto.avatarinfo_base), global::Keep.DBData.Proto.avatarinfo_base.Parser, new[]{ "Id", "NickName", "ReggsterType", "Gold", "IsTuto" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keep.DBData.Proto.avatarinfo_area_map), global::Keep.DBData.Proto.avatarinfo_area_map.Parser, new[]{ "AreaNum", "IsLock" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keep.DBData.Proto.avatarinfo_map_buffer), global::Keep.DBData.Proto.avatarinfo_map_buffer.Parser, new[]{ "IsUnlock", "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keep.DBData.Proto.avatarinfo_stamina), global::Keep.DBData.Proto.avatarinfo_stamina.Parser, new[]{ "MaxExtraStamina", "CampStamina", "ExploreStamina", "CarryCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keep.DBData.Proto.avatarinfo_cloth), global::Keep.DBData.Proto.avatarinfo_cloth.Parser, new[]{ "Part", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keep.DBData.Proto.avatarinfo_map_explore_info), global::Keep.DBData.Proto.avatarinfo_map_explore_info.Parser, new[]{ "MapId", "CurrentStateNum", "MaplockStateNum", "CurrentTime", "IsLock", "IsFirstExplore" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keep.DBData.Proto.db_data_avaterinfo), global::Keep.DBData.Proto.db_data_avaterinfo.Parser, new[]{ "UserId", "Base", "AreaMaps", "MapBuffers", "PlayerCloths", "MapExplore" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum registerType {
    [pbr::OriginalName("register_none")] RegisterNone = 0,
    /// <summary>
    /// 服务器上注册
    /// </summary>
    [pbr::OriginalName("register_self")] RegisterSelf = 1,
    /// <summary>
    /// 外部 微信
    /// </summary>
    [pbr::OriginalName("register_extern_wechat")] RegisterExternWechat = 2,
    /// <summary>
    /// 外部 qq
    /// </summary>
    [pbr::OriginalName("register_extern_qq")] RegisterExternQq = 3,
    /// <summary>
    /// 外部	新浪
    /// </summary>
    [pbr::OriginalName("register_extern_sina")] RegisterExternSina = 4,
  }

  #endregion

  #region Messages
  public sealed partial class avatarinfo_base : pb::IMessage<avatarinfo_base> {
    private static readonly pb::MessageParser<avatarinfo_base> _parser = new pb::MessageParser<avatarinfo_base>(() => new avatarinfo_base());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<avatarinfo_base> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keep.DBData.Proto.GameDataAvatarinfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public avatarinfo_base() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public avatarinfo_base(avatarinfo_base other) : this() {
      id_ = other.id_;
      nickName_ = other.nickName_;
      reggsterType_ = other.reggsterType_;
      gold_ = other.gold_;
      isTuto_ = other.isTuto_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public avatarinfo_base Clone() {
      return new avatarinfo_base(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "nickName" field.</summary>
    public const int NickNameFieldNumber = 2;
    private string nickName_ = "";
    /// <summary>
    /// nikename
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reggsterType" field.</summary>
    public const int ReggsterTypeFieldNumber = 3;
    private global::Keep.DBData.Proto.registerType reggsterType_ = 0;
    /// <summary>
    /// 注册方式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Keep.DBData.Proto.registerType ReggsterType {
      get { return reggsterType_; }
      set {
        reggsterType_ = value;
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 4;
    private int gold_;
    /// <summary>
    /// 金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "isTuto" field.</summary>
    public const int IsTutoFieldNumber = 5;
    private bool isTuto_;
    /// <summary>
    /// 新手引导是否完成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTuto {
      get { return isTuto_; }
      set {
        isTuto_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as avatarinfo_base);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(avatarinfo_base other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (NickName != other.NickName) return false;
      if (ReggsterType != other.ReggsterType) return false;
      if (Gold != other.Gold) return false;
      if (IsTuto != other.IsTuto) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (NickName.Length != 0) hash ^= NickName.GetHashCode();
      if (ReggsterType != 0) hash ^= ReggsterType.GetHashCode();
      if (Gold != 0) hash ^= Gold.GetHashCode();
      if (IsTuto != false) hash ^= IsTuto.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NickName);
      }
      if (ReggsterType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ReggsterType);
      }
      if (Gold != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Gold);
      }
      if (IsTuto != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsTuto);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (ReggsterType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReggsterType);
      }
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      if (IsTuto != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(avatarinfo_base other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.NickName.Length != 0) {
        NickName = other.NickName;
      }
      if (other.ReggsterType != 0) {
        ReggsterType = other.ReggsterType;
      }
      if (other.Gold != 0) {
        Gold = other.Gold;
      }
      if (other.IsTuto != false) {
        IsTuto = other.IsTuto;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            NickName = input.ReadString();
            break;
          }
          case 24: {
            reggsterType_ = (global::Keep.DBData.Proto.registerType) input.ReadEnum();
            break;
          }
          case 32: {
            Gold = input.ReadInt32();
            break;
          }
          case 40: {
            IsTuto = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class avatarinfo_area_map : pb::IMessage<avatarinfo_area_map> {
    private static readonly pb::MessageParser<avatarinfo_area_map> _parser = new pb::MessageParser<avatarinfo_area_map>(() => new avatarinfo_area_map());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<avatarinfo_area_map> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keep.DBData.Proto.GameDataAvatarinfoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public avatarinfo_area_map() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public avatarinfo_area_map(avatarinfo_area_map other) : this() {
      areaNum_ = other.areaNum_;
      isLock_ = other.isLock_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public avatarinfo_area_map Clone() {
      return new avatarinfo_area_map(this);
    }

    /// <summary>Field number for the "area_num" field.</summary>
    public const int AreaNumFieldNumber = 1;
    private int areaNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AreaNum {
      get { return areaNum_; }
      set {
        areaNum_ = value;
      }
    }

    /// <summary>Field number for the "is_lock" field.</summary>
    public const int IsLockFieldNumber = 2;
    private bool isLock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLock {
      get { return isLock_; }
      set {
        isLock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as avatarinfo_area_map);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(avatarinfo_area_map other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AreaNum != other.AreaNum) return false;
      if (IsLock != other.IsLock) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AreaNum != 0) hash ^= AreaNum.GetHashCode();
      if (IsLock != false) hash ^= IsLock.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AreaNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AreaNum);
      }
      if (IsLock != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsLock);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AreaNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AreaNum);
      }
      if (IsLock != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(avatarinfo_area_map other) {
      if (other == null) {
        return;
      }
      if (other.AreaNum != 0) {
        AreaNum = other.AreaNum;
      }
      if (other.IsLock != false) {
        IsLock = other.IsLock;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AreaNum = input.ReadInt32();
            break;
          }
          case 16: {
            IsLock = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class avatarinfo_map_buffer : pb::IMessage<avatarinfo_map_buffer> {
    private static readonly pb::MessageParser<avatarinfo_map_buffer> _parser = new pb::MessageParser<avatarinfo_map_buffer>(() => new avatarinfo_map_buffer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<avatarinfo_map_buffer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keep.DBData.Proto.GameDataAvatarinfoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public avatarinfo_map_buffer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public avatarinfo_map_buffer(avatarinfo_map_buffer other) : this() {
      isUnlock_ = other.isUnlock_;
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public avatarinfo_map_buffer Clone() {
      return new avatarinfo_map_buffer(this);
    }

    /// <summary>Field number for the "is_unlock" field.</summary>
    public const int IsUnlockFieldNumber = 1;
    private bool isUnlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUnlock {
      get { return isUnlock_; }
      set {
        isUnlock_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as avatarinfo_map_buffer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(avatarinfo_map_buffer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsUnlock != other.IsUnlock) return false;
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsUnlock != false) hash ^= IsUnlock.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsUnlock != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsUnlock);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsUnlock != false) {
        size += 1 + 1;
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(avatarinfo_map_buffer other) {
      if (other == null) {
        return;
      }
      if (other.IsUnlock != false) {
        IsUnlock = other.IsUnlock;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsUnlock = input.ReadBool();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class avatarinfo_stamina : pb::IMessage<avatarinfo_stamina> {
    private static readonly pb::MessageParser<avatarinfo_stamina> _parser = new pb::MessageParser<avatarinfo_stamina>(() => new avatarinfo_stamina());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<avatarinfo_stamina> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keep.DBData.Proto.GameDataAvatarinfoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public avatarinfo_stamina() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public avatarinfo_stamina(avatarinfo_stamina other) : this() {
      maxExtraStamina_ = other.maxExtraStamina_;
      campStamina_ = other.campStamina_;
      exploreStamina_ = other.exploreStamina_;
      carryCount_ = other.carryCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public avatarinfo_stamina Clone() {
      return new avatarinfo_stamina(this);
    }

    /// <summary>Field number for the "max_extra_stamina" field.</summary>
    public const int MaxExtraStaminaFieldNumber = 1;
    private float maxExtraStamina_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxExtraStamina {
      get { return maxExtraStamina_; }
      set {
        maxExtraStamina_ = value;
      }
    }

    /// <summary>Field number for the "camp_stamina" field.</summary>
    public const int CampStaminaFieldNumber = 2;
    private float campStamina_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CampStamina {
      get { return campStamina_; }
      set {
        campStamina_ = value;
      }
    }

    /// <summary>Field number for the "explore_stamina" field.</summary>
    public const int ExploreStaminaFieldNumber = 3;
    private float exploreStamina_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ExploreStamina {
      get { return exploreStamina_; }
      set {
        exploreStamina_ = value;
      }
    }

    /// <summary>Field number for the "carry_count" field.</summary>
    public const int CarryCountFieldNumber = 4;
    private int carryCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CarryCount {
      get { return carryCount_; }
      set {
        carryCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as avatarinfo_stamina);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(avatarinfo_stamina other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxExtraStamina != other.MaxExtraStamina) return false;
      if (CampStamina != other.CampStamina) return false;
      if (ExploreStamina != other.ExploreStamina) return false;
      if (CarryCount != other.CarryCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxExtraStamina != 0F) hash ^= MaxExtraStamina.GetHashCode();
      if (CampStamina != 0F) hash ^= CampStamina.GetHashCode();
      if (ExploreStamina != 0F) hash ^= ExploreStamina.GetHashCode();
      if (CarryCount != 0) hash ^= CarryCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxExtraStamina != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(MaxExtraStamina);
      }
      if (CampStamina != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(CampStamina);
      }
      if (ExploreStamina != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(ExploreStamina);
      }
      if (CarryCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CarryCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxExtraStamina != 0F) {
        size += 1 + 4;
      }
      if (CampStamina != 0F) {
        size += 1 + 4;
      }
      if (ExploreStamina != 0F) {
        size += 1 + 4;
      }
      if (CarryCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CarryCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(avatarinfo_stamina other) {
      if (other == null) {
        return;
      }
      if (other.MaxExtraStamina != 0F) {
        MaxExtraStamina = other.MaxExtraStamina;
      }
      if (other.CampStamina != 0F) {
        CampStamina = other.CampStamina;
      }
      if (other.ExploreStamina != 0F) {
        ExploreStamina = other.ExploreStamina;
      }
      if (other.CarryCount != 0) {
        CarryCount = other.CarryCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            MaxExtraStamina = input.ReadFloat();
            break;
          }
          case 21: {
            CampStamina = input.ReadFloat();
            break;
          }
          case 29: {
            ExploreStamina = input.ReadFloat();
            break;
          }
          case 32: {
            CarryCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class avatarinfo_cloth : pb::IMessage<avatarinfo_cloth> {
    private static readonly pb::MessageParser<avatarinfo_cloth> _parser = new pb::MessageParser<avatarinfo_cloth>(() => new avatarinfo_cloth());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<avatarinfo_cloth> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keep.DBData.Proto.GameDataAvatarinfoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public avatarinfo_cloth() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public avatarinfo_cloth(avatarinfo_cloth other) : this() {
      part_ = other.part_;
      num_ = other.num_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public avatarinfo_cloth Clone() {
      return new avatarinfo_cloth(this);
    }

    /// <summary>Field number for the "part" field.</summary>
    public const int PartFieldNumber = 1;
    private string part_ = "";
    /// <summary>
    ///部位号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Part {
      get { return part_; }
      set {
        part_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private string num_ = "";
    /// <summary>
    /// 编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Num {
      get { return num_; }
      set {
        num_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as avatarinfo_cloth);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(avatarinfo_cloth other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Part != other.Part) return false;
      if (Num != other.Num) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Part.Length != 0) hash ^= Part.GetHashCode();
      if (Num.Length != 0) hash ^= Num.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Part.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Part);
      }
      if (Num.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Num);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Part.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Part);
      }
      if (Num.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Num);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(avatarinfo_cloth other) {
      if (other == null) {
        return;
      }
      if (other.Part.Length != 0) {
        Part = other.Part;
      }
      if (other.Num.Length != 0) {
        Num = other.Num;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Part = input.ReadString();
            break;
          }
          case 18: {
            Num = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class avatarinfo_map_explore_info : pb::IMessage<avatarinfo_map_explore_info> {
    private static readonly pb::MessageParser<avatarinfo_map_explore_info> _parser = new pb::MessageParser<avatarinfo_map_explore_info>(() => new avatarinfo_map_explore_info());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<avatarinfo_map_explore_info> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keep.DBData.Proto.GameDataAvatarinfoReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public avatarinfo_map_explore_info() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public avatarinfo_map_explore_info(avatarinfo_map_explore_info other) : this() {
      mapId_ = other.mapId_;
      currentStateNum_ = other.currentStateNum_;
      maplockStateNum_ = other.maplockStateNum_;
      currentTime_ = other.currentTime_;
      isLock_ = other.isLock_;
      isFirstExplore_ = other.isFirstExplore_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public avatarinfo_map_explore_info Clone() {
      return new avatarinfo_map_explore_info(this);
    }

    /// <summary>Field number for the "map_id" field.</summary>
    public const int MapIdFieldNumber = 1;
    private string mapId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MapId {
      get { return mapId_; }
      set {
        mapId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "current_state_num" field.</summary>
    public const int CurrentStateNumFieldNumber = 2;
    private int currentStateNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentStateNum {
      get { return currentStateNum_; }
      set {
        currentStateNum_ = value;
      }
    }

    /// <summary>Field number for the "maplock_state_num" field.</summary>
    public const int MaplockStateNumFieldNumber = 3;
    private int maplockStateNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaplockStateNum {
      get { return maplockStateNum_; }
      set {
        maplockStateNum_ = value;
      }
    }

    /// <summary>Field number for the "current_time" field.</summary>
    public const int CurrentTimeFieldNumber = 4;
    private int currentTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentTime {
      get { return currentTime_; }
      set {
        currentTime_ = value;
      }
    }

    /// <summary>Field number for the "is_lock" field.</summary>
    public const int IsLockFieldNumber = 5;
    private bool isLock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLock {
      get { return isLock_; }
      set {
        isLock_ = value;
      }
    }

    /// <summary>Field number for the "is_first_explore" field.</summary>
    public const int IsFirstExploreFieldNumber = 6;
    private bool isFirstExplore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFirstExplore {
      get { return isFirstExplore_; }
      set {
        isFirstExplore_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as avatarinfo_map_explore_info);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(avatarinfo_map_explore_info other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapId != other.MapId) return false;
      if (CurrentStateNum != other.CurrentStateNum) return false;
      if (MaplockStateNum != other.MaplockStateNum) return false;
      if (CurrentTime != other.CurrentTime) return false;
      if (IsLock != other.IsLock) return false;
      if (IsFirstExplore != other.IsFirstExplore) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapId.Length != 0) hash ^= MapId.GetHashCode();
      if (CurrentStateNum != 0) hash ^= CurrentStateNum.GetHashCode();
      if (MaplockStateNum != 0) hash ^= MaplockStateNum.GetHashCode();
      if (CurrentTime != 0) hash ^= CurrentTime.GetHashCode();
      if (IsLock != false) hash ^= IsLock.GetHashCode();
      if (IsFirstExplore != false) hash ^= IsFirstExplore.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MapId);
      }
      if (CurrentStateNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrentStateNum);
      }
      if (MaplockStateNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaplockStateNum);
      }
      if (CurrentTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CurrentTime);
      }
      if (IsLock != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsLock);
      }
      if (IsFirstExplore != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsFirstExplore);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MapId);
      }
      if (CurrentStateNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentStateNum);
      }
      if (MaplockStateNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaplockStateNum);
      }
      if (CurrentTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentTime);
      }
      if (IsLock != false) {
        size += 1 + 1;
      }
      if (IsFirstExplore != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(avatarinfo_map_explore_info other) {
      if (other == null) {
        return;
      }
      if (other.MapId.Length != 0) {
        MapId = other.MapId;
      }
      if (other.CurrentStateNum != 0) {
        CurrentStateNum = other.CurrentStateNum;
      }
      if (other.MaplockStateNum != 0) {
        MaplockStateNum = other.MaplockStateNum;
      }
      if (other.CurrentTime != 0) {
        CurrentTime = other.CurrentTime;
      }
      if (other.IsLock != false) {
        IsLock = other.IsLock;
      }
      if (other.IsFirstExplore != false) {
        IsFirstExplore = other.IsFirstExplore;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MapId = input.ReadString();
            break;
          }
          case 16: {
            CurrentStateNum = input.ReadInt32();
            break;
          }
          case 24: {
            MaplockStateNum = input.ReadInt32();
            break;
          }
          case 32: {
            CurrentTime = input.ReadInt32();
            break;
          }
          case 40: {
            IsLock = input.ReadBool();
            break;
          }
          case 48: {
            IsFirstExplore = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 单条用户记录
  /// </summary>
  public sealed partial class db_data_avaterinfo : pb::IMessage<db_data_avaterinfo> {
    private static readonly pb::MessageParser<db_data_avaterinfo> _parser = new pb::MessageParser<db_data_avaterinfo>(() => new db_data_avaterinfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<db_data_avaterinfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keep.DBData.Proto.GameDataAvatarinfoReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_data_avaterinfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_data_avaterinfo(db_data_avaterinfo other) : this() {
      userId_ = other.userId_;
      Base = other.base_ != null ? other.Base.Clone() : null;
      areaMaps_ = other.areaMaps_.Clone();
      mapBuffers_ = other.mapBuffers_.Clone();
      playerCloths_ = other.playerCloths_.Clone();
      mapExplore_ = other.mapExplore_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_data_avaterinfo Clone() {
      return new db_data_avaterinfo(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private int userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 2;
    private global::Keep.DBData.Proto.avatarinfo_base base_;
    /// <summary>
    ///人物基础信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Keep.DBData.Proto.avatarinfo_base Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "area_maps" field.</summary>
    public const int AreaMapsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Keep.DBData.Proto.avatarinfo_area_map> _repeated_areaMaps_codec
        = pb::FieldCodec.ForMessage(26, global::Keep.DBData.Proto.avatarinfo_area_map.Parser);
    private readonly pbc::RepeatedField<global::Keep.DBData.Proto.avatarinfo_area_map> areaMaps_ = new pbc::RepeatedField<global::Keep.DBData.Proto.avatarinfo_area_map>();
    /// <summary>
    ///区域地区信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Keep.DBData.Proto.avatarinfo_area_map> AreaMaps {
      get { return areaMaps_; }
    }

    /// <summary>Field number for the "map_buffers" field.</summary>
    public const int MapBuffersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Keep.DBData.Proto.avatarinfo_map_buffer> _repeated_mapBuffers_codec
        = pb::FieldCodec.ForMessage(34, global::Keep.DBData.Proto.avatarinfo_map_buffer.Parser);
    private readonly pbc::RepeatedField<global::Keep.DBData.Proto.avatarinfo_map_buffer> mapBuffers_ = new pbc::RepeatedField<global::Keep.DBData.Proto.avatarinfo_map_buffer>();
    /// <summary>
    /// 地区关卡信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Keep.DBData.Proto.avatarinfo_map_buffer> MapBuffers {
      get { return mapBuffers_; }
    }

    /// <summary>Field number for the "player_cloths" field.</summary>
    public const int PlayerClothsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Keep.DBData.Proto.avatarinfo_cloth> _repeated_playerCloths_codec
        = pb::FieldCodec.ForMessage(42, global::Keep.DBData.Proto.avatarinfo_cloth.Parser);
    private readonly pbc::RepeatedField<global::Keep.DBData.Proto.avatarinfo_cloth> playerCloths_ = new pbc::RepeatedField<global::Keep.DBData.Proto.avatarinfo_cloth>();
    /// <summary>
    /// 服装
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Keep.DBData.Proto.avatarinfo_cloth> PlayerCloths {
      get { return playerCloths_; }
    }

    /// <summary>Field number for the "map_explore" field.</summary>
    public const int MapExploreFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Keep.DBData.Proto.avatarinfo_map_explore_info> _repeated_mapExplore_codec
        = pb::FieldCodec.ForMessage(50, global::Keep.DBData.Proto.avatarinfo_map_explore_info.Parser);
    private readonly pbc::RepeatedField<global::Keep.DBData.Proto.avatarinfo_map_explore_info> mapExplore_ = new pbc::RepeatedField<global::Keep.DBData.Proto.avatarinfo_map_explore_info>();
    /// <summary>
    /// 地图探索buffer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Keep.DBData.Proto.avatarinfo_map_explore_info> MapExplore {
      get { return mapExplore_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as db_data_avaterinfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(db_data_avaterinfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (!object.Equals(Base, other.Base)) return false;
      if(!areaMaps_.Equals(other.areaMaps_)) return false;
      if(!mapBuffers_.Equals(other.mapBuffers_)) return false;
      if(!playerCloths_.Equals(other.playerCloths_)) return false;
      if(!mapExplore_.Equals(other.mapExplore_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (base_ != null) hash ^= Base.GetHashCode();
      hash ^= areaMaps_.GetHashCode();
      hash ^= mapBuffers_.GetHashCode();
      hash ^= playerCloths_.GetHashCode();
      hash ^= mapExplore_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserId);
      }
      if (base_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Base);
      }
      areaMaps_.WriteTo(output, _repeated_areaMaps_codec);
      mapBuffers_.WriteTo(output, _repeated_mapBuffers_codec);
      playerCloths_.WriteTo(output, _repeated_playerCloths_codec);
      mapExplore_.WriteTo(output, _repeated_mapExplore_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      size += areaMaps_.CalculateSize(_repeated_areaMaps_codec);
      size += mapBuffers_.CalculateSize(_repeated_mapBuffers_codec);
      size += playerCloths_.CalculateSize(_repeated_playerCloths_codec);
      size += mapExplore_.CalculateSize(_repeated_mapExplore_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(db_data_avaterinfo other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          base_ = new global::Keep.DBData.Proto.avatarinfo_base();
        }
        Base.MergeFrom(other.Base);
      }
      areaMaps_.Add(other.areaMaps_);
      mapBuffers_.Add(other.mapBuffers_);
      playerCloths_.Add(other.playerCloths_);
      mapExplore_.Add(other.mapExplore_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt32();
            break;
          }
          case 18: {
            if (base_ == null) {
              base_ = new global::Keep.DBData.Proto.avatarinfo_base();
            }
            input.ReadMessage(base_);
            break;
          }
          case 26: {
            areaMaps_.AddEntriesFrom(input, _repeated_areaMaps_codec);
            break;
          }
          case 34: {
            mapBuffers_.AddEntriesFrom(input, _repeated_mapBuffers_codec);
            break;
          }
          case 42: {
            playerCloths_.AddEntriesFrom(input, _repeated_playerCloths_codec);
            break;
          }
          case 50: {
            mapExplore_.AddEntriesFrom(input, _repeated_mapExplore_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
